AWSTemplateFormatVersion: '2010-09-09'
Description: The RASD service stack

Parameters:
  pArtifactsBucket:
    Type: String
    Description: The S3 artifact bucket path
  pEnvironment:
    Type: String
    Description: The AWS environment this belongs to
  pEmailAdminInbox:
    Type: String
    Description: The email address of the admin inbox
  pCleanBranch:
    Type: String
    Description: A cleaned version of the code branch name
    Default: development
  pHostedZone:
    Type: String
    Description: The hosted zone the site is accessed under
  pHostedZoneId:
    Type: String
    Description: The hosted zone ID of the hosted zone
  pProductComponent:
    Type: String
    Description: The name of the product component
  pProductName:
    Type: String
    Description: The name of the product
  pRasdSupportEmail:
    Type: String
    Description: The support email address for the RASD service
  pSecretKeyName:
    Type: String
    Description: The secret name for rasd service
  pSubDomain:
    Type: String
    Description: The subdomain the site is accessed on
  pSslCertificate:
    Type: String
    Description: The arn of the SSL certificate to be used

Conditions:
  IsDev: !Equals
    - !Ref pEnvironment
    - development
  NotDev: !Not
    - !Condition IsDev

Resources:
  RasdSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref pSecretKeyName
      Description: Secrets for RASD services

  DynamoDBTableDataAccessRequests:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeType: S
          AttributeName: id
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: !If [ NotDev, true, false ]
      KeySchema:
        - KeyType: HASH
          AttributeName: id
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [ NotDev, true, false ]
      TableName: !Sub ${AWS::StackName}-DataAccessRequests
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  DynamoDBTableMetadata:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeType: S
          AttributeName: id
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: !If [ NotDev, true, false ]
      KeySchema:
        - KeyType: HASH
          AttributeName: id
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [ NotDev, true, false ]
      TableName: !Sub ${AWS::StackName}-Metadata
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  DynamoDBTableOrganisations:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeType: S
          AttributeName: id
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: !If [ NotDev, true, false ]
      KeySchema:
        - KeyType: HASH
          AttributeName: id
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [ NotDev, true, false ]
      TableName: !Sub ${AWS::StackName}-Organisations
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  DynamoDBTableRegistrations:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeType: S
          AttributeName: id
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: !If [ NotDev, true, false ]
      KeySchema:
        - KeyType: HASH
          AttributeName: id
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [ NotDev, true, false ]
      TableName: !Sub ${AWS::StackName}-Registrations
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  ApiGatewayS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${pProductName}-${pProductComponent}-assets
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        # WebsiteConfiguration:
        # IndexDocument: index.html
        # ErrorDocument: error.html
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  ApiGatewayS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  IAMRoleiamRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PolicyForRASDLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Resource:
                  - !Ref RasdSecrets
                Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
              - Resource:
                  - !GetAtt DynamoDBTableDataAccessRequests.Arn
                  - !GetAtt DynamoDBTableMetadata.Arn
                  - !GetAtt DynamoDBTableOrganisations.Arn
                  - !GetAtt DynamoDBTableRegistrations.Arn
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Effect: Allow
              - Resource: '*'
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListBucket
                  - s3:HeadBucket
                  - s3:Get*
                  - s3:List*
                Effect: Allow
              - Resource: '*'
                Action:
                  - cognito-identity:ListIdentityPools
                  - cognito-sync:ListRecords
                  - cognito-sync:UpdateRecords
                  - cognito-idp:Admin*
                  - cognito-idp:ChangePassword
                  - cognito-idp:ConfirmDevice
                  - cognito-idp:ConfirmForgotPassword
                  - cognito-idp:ConfirmSignUp
                  - cognito-idp:CreateGroup
                  - cognito-idp:DeleteGroup
                Effect: Allow
              - Resource: '*'
                Action:
                  - logs:CreateLogGroup
                Effect: Allow
              - Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
              - Resource: '*'
                Action:
                  - ses:SendEmail
                Effect: Allow
      RoleName: !Sub ${AWS::StackName}-iamRoleForLambda
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # ApiGatewayV2DomainName:
  #   Type: AWS::ApiGatewayV2::DomainName
  #   Properties:
  #     DomainName: !Sub ${pSubDomain}.${pHostedZone}
  #     DomainNameConfigurations:
  #       - CertificateArn: !Ref ApiGatewayCertificateRegional
  #         EndpointType: REGIONAL
  #         SecurityPolicy: TLS_1_2
  #     Tags:
  #       Name: !Ref AWS::StackName

  DNSBackend:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref pHostedZoneId
      Name: !Sub ${pSubDomain}.${pHostedZone}
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiGatewayCustomDomainName.RegionalDomainName
        HostedZoneId: Z2RPCDW04V8134
        EvaluateTargetHealth: true

  CognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      # AutoVerifiedAttributes:
      #   - email
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      # EmailVerificationMessage: Please click the link below to verify your email address.
      # EmailVerificationSubject: Your verification link of RASD
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 3
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: organisation_id
        - AttributeDataType: String
          Mutable: true
          Name: family_name
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'
        - AttributeDataType: String
          Mutable: true
          Name: given_name
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'
        - AttributeDataType: String
          Mutable: true
          Name: email
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'

  CognitoGroupAdmin:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Used by the RASD backend to determine user permission level. RASD Admins (inside the app).
      GroupName: Administrators
      Precedence: 1
      UserPoolId: !Ref CognitoPool

  CognitoGroupCustodians:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Used by the RASD backend to determine user permission level. RASD Custodians (inside the app).
      GroupName: DataCustodians
      Precedence: 2
      UserPoolId: !Ref CognitoPool

  CognitoGroupRequestors:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Used by the RASD backend to determine user permission level. RASD Requestors (inside the app).
      GroupName: DataRequestors
      Precedence: 3
      UserPoolId: !Ref CognitoPool

  CognitoAppClientRasdbackend:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoPool
      ClientName: !Sub ${AWS::StackName}-AppClientRasdbackend
      PreventUserExistenceErrors: ENABLED
      GenerateSecret: True
      EnableTokenRevocation: True
      AccessTokenValidity: 180
      IdTokenValidity: 180
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
      ReadAttributes:
        - given_name
        - email_verified
        - custom:organisation_id
        - zoneinfo
        - website
        - preferred_username
        - name
        - locale
        - phone_number
        - family_name
        - birthdate
        - middle_name
        - phone_number_verified
        - profile
        - picture
        - address
        - gender
        - updated_at
        - nickname
        - email
      WriteAttributes:
        - given_name
        - custom:organisation_id
        - zoneinfo
        - website
        - preferred_username
        - name
        - locale
        - phone_number
        - family_name
        - birthdate
        - middle_name
        - profile
        - picture
        - address
        - gender
        - updated_at
        - nickname
        - email

  LambdaBackendService:
    Type: AWS::Lambda::Function
    Properties:
      # Architectures:
      #   - String
      Code: ../../../backend/dist/rasd_fastapi
      # CodeSigningConfigArn: String
      # DeadLetterConfig: DeadLetterConfig
      Description: Rasd Service Lambda Function
      Environment:
        Variables:
          RASD_SECRETS_NAME: !Ref RasdSecrets # !Ref pSecretKeyName
          AWS_COGNITO_CLIENT_ID: !Ref CognitoAppClientRasdbackend
          AWS_COGNITO_POOL_ID: !Ref CognitoPool
          AWS_COGNITO_CLIENT_SECRET_KEY: !GetAtt CognitoAppClientRasdbackend.ClientSecret
          AWS_DYNAMODB_TABLE_ACCESS_REQUESTS: !Sub ${AWS::StackName}-DataAccessRequests
          AWS_DYNAMODB_TABLE_METADATA: !Sub ${AWS::StackName}-Metadata
          AWS_DYNAMODB_TABLE_ORGANISATIONS: !Sub ${AWS::StackName}-Organisations
          AWS_DYNAMODB_TABLE_REGISTRATIONS: !Sub ${AWS::StackName}-Registrations
          EMAIL_FROM_ADDRESS: !Sub no-reply@mail.${pSubDomain}.${pHostedZone}
          EMAIL_ADMIN_INBOX: !Ref pEmailAdminInbox
          RASD_FRAMEWORK_URL: !Sub https://www.${pHostedZone}/framework
          RASD_CREATE_PASSWORD_URL: !Sub https://${pSubDomain}.${pHostedZone}/#/create-password
          RASD_SUPPORT_EMAIL: !Ref pRasdSupportEmail
          RASD_URL: !Sub https://${pSubDomain}.${pHostedZone}
      FunctionName: !Sub rasd-${pCleanBranch}-backend-api
      Handler: rasd_fastapi.handler.handler
      MemorySize: 4096
      Role: !GetAtt IAMRoleiamRoleForLambda.Arn
      Runtime: python3.9
      # RuntimeManagementConfig: RuntimeManagementConfig
      # SnapStart: SnapStart
      Timeout: 30
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  ApiGatewayLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaBackendService.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/api/{proxy+}

  ApiGatewayLambdaInvokePermission2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaBackendService.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/api

  ApiGatewayCertificateRegional:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${pSubDomain}.${pHostedZone}
      DomainValidationOptions:
        - DomainName: !Sub ${pSubDomain}.${pHostedZone}
          HostedZoneId: !Ref pHostedZoneId
      ValidationMethod: DNS

  ApiGatewayCustomDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub ${pSubDomain}.${pHostedZone}
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref ApiGatewayCertificateRegional
      SecurityPolicy: TLS_1_2
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: ApiGatewayDeployment
    Properties:
      DomainName: !Ref ApiGatewayCustomDomainName
      RestApiId: !Ref ApiGatewayRestApi
      Stage: !Ref pEnvironment

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      BinaryMediaTypes:
        - "*/*"
      DisableExecuteApiEndpoint: false
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub ${AWS::StackName}-RestApi

  ApiGatewayResponseModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId: !Ref ApiGatewayRestApi
      Schema:
        type: object
        properties: {}

  GatewayResponseMissingAuth:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters: {}
      ResponseTemplates:
        application/json: "{}"
      ResponseType: MISSING_AUTHENTICATION_TOKEN
      RestApiId: !Ref ApiGatewayRestApi
      StatusCode: '404'

  GatewayResponseAccessDenied:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters: {}
      ResponseTemplates:
        application/json: "{}"
      ResponseType: ACCESS_DENIED
      RestApiId: !Ref ApiGatewayRestApi
      StatusCode: '404'

  ApiGatewayResourceApi:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "api"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceRootProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceApiProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayResourceApi
      PathPart: "{proxy+}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiRootMethod
      - ApiGatewayMethodApiAny
      - ApiGatewayMethodApiProxyAny
      - ApiGatewayMethodRootProxyAny
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref pEnvironment

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      CacheClusterEnabled: false
      DeploymentId: !Ref ApiGatewayDeployment
      Description: !Sub The ${pEnvironment} stage of the ${AWS::StackName} API
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref pEnvironment
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  ApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Credentials: !GetAtt ApiGatewayS3Role.Arn
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/${pCleanBranch}-static/index.html
          - BucketName: !Ref ApiGatewayS3Bucket
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.content-type: integration.response.header.content-type
          - StatusCode: 400
            SelectionPattern: 4\d{2}
          - StatusCode: 500
            SelectionPattern: 5\d{2}
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: !Ref ApiGatewayResponseModel
          ResponseParameters:
            method.response.header.Content-Type: true
            method.response.header.content-type: true
        - StatusCode: 400
        - StatusCode: 500
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodRootProxyAny:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
      ResourceId: !Ref ApiGatewayResourceRootProxy
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS
        Credentials: !GetAtt ApiGatewayS3Role.Arn
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.content-type: integration.response.header.content-type
          - StatusCode: 400
            SelectionPattern: 4\d{2}
          - StatusCode: 500
            SelectionPattern: 5\d{2}
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/${CleanBranch}-static/{proxy}
          - BucketName: !Ref ApiGatewayS3Bucket
            CleanBranch: !Ref pCleanBranch
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: !Ref ApiGatewayResponseModel
          ResponseParameters:
            method.response.header.Content-Type: true
            method.response.header.content-type: true
        - StatusCode: 400
        - StatusCode: 500

  ApiGatewayMethodApiAny:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref ApiGatewayResourceApi
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBackendService.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH

  ApiGatewayMethodApiProxyAny:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: false
      ResourceId: !Ref ApiGatewayResourceApiProxy
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBackendService.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH

  SESDomainIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Sub ${pSubDomain}.${pHostedZone}
      MailFromAttributes:
        MailFromDomain: !Sub mail.${pSubDomain}.${pHostedZone}
