AWSTemplateFormatVersion: '2010-09-09'
Description: The RASD service stack

Parameters:
  pArtifactsBucket:
    Type: String
    Description: The S3 artifact bucket path
  pEnvironment:
    Type: String
    Description: The AWS environment this belongs to
  pCleanBranch:
    Type: String
    Description: A cleaned version of the code branch name
    Default: development
  pHostedZone:
    Type: String
    Description: The hosted zone the site is accessed under
  pHostedZoneId:
    Type: String
    Description: The hosted zone ID of the hosted zone
  pSecretKeyName:
    Type: String
    Description: The secret name for rasd service
  pSubDomain:
    Type: String
    Description: The subdomain the site is accessed on
  pSslCertificate:
    Type: String
    Description: The arn of the SSL certificate to be used

Conditions:
  IsDev: !Equals
    - !Ref pEnvironment
    - development
  NotDev: !Not
    - !Condition IsDev

Resources:
  RasdSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref pSecretKeyName
      Description: Secrets for RASD services

  DynamoDBTableDataAccessRequests:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeType: S
          AttributeName: id
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: !If [ NotDev, true, false ]
      KeySchema:
        - KeyType: HASH
          AttributeName: id
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [ NotDev, true, false ]
      TableName: !Sub ${AWS::StackName}-DataAccessRequests
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  DynamoDBTableMetadata:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeType: S
          AttributeName: id
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: !If [ NotDev, true, false ]
      KeySchema:
        - KeyType: HASH
          AttributeName: id
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [ NotDev, true, false ]
      TableName: !Sub ${AWS::StackName}-Metadata
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  DynamoDBTableOrganisations:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeType: S
          AttributeName: id
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: !If [ NotDev, true, false ]
      KeySchema:
        - KeyType: HASH
          AttributeName: id
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [ NotDev, true, false ]
      TableName: !Sub ${AWS::StackName}-Organisations
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  DynamoDBTableRegistrations:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeType: S
          AttributeName: id
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: !If [ NotDev, true, false ]
      KeySchema:
        - KeyType: HASH
          AttributeName: id
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [ NotDev, true, false ]
      TableName: !Sub ${AWS::StackName}-Registrations
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  IAMRoleiamRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PolicyForRASDLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Resource:
                  - !Ref RasdSecrets
                Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
              - Resource:
                  - !GetAtt DynamoDBTableDataAccessRequests.Arn
                  - !GetAtt DynamoDBTableMetadata.Arn
                  - !GetAtt DynamoDBTableOrganisations.Arn
                  - !GetAtt DynamoDBTableRegistrations.Arn
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Effect: Allow
              - Resource: '*'
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListBucket
                  - s3:HeadBucket
                  - s3:Get*
                  - s3:List*
                Effect: Allow
              - Resource: '*'
                Action:
                  - cognito-identity:ListIdentityPools
                  - cognito-sync:ListRecords
                  - cognito-sync:UpdateRecords
                  - cognito-idp:Admin*
                  - cognito-idp:ChangePassword
                  - cognito-idp:ConfirmDevice
                  - cognito-idp:ConfirmForgotPassword
                  - cognito-idp:ConfirmSignUp
                  - cognito-idp:CreateGroup
                  - cognito-idp:DeleteGroup
                Effect: Allow
              - Resource: '*'
                Action:
                  - logs:CreateLogGroup
                Effect: Allow
              - Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
              - Resource: '*'
                Action:
                  - ses:SendEmail
                Effect: Allow
      RoleName: !Sub ${AWS::StackName}-iamRoleForLambda
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # ApiGatewayV2DomainName:
  #   Type: AWS::ApiGatewayV2::DomainName
  #   Properties:
  #     DomainName: !Sub ${pSubDomain}.${pHostedZone}
  #     DomainNameConfigurations:
  #       - CertificateArn: !Ref ApiGatewayCertificateRegional
  #         EndpointType: REGIONAL
  #         SecurityPolicy: TLS_1_2
  #     Tags:
  #       Name: !Ref AWS::StackName

  ApiGatewayCustomDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub ${pSubDomain}.${pHostedZone}
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref ApiGatewayCertificateRegional
      SecurityPolicy: TLS_1_2
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # ApiMapping:
  #   Type: AWS::ApiGatewayV2::ApiMapping
  #   Properties:
  #     DomainName: !Ref ApiGatewayCustomDomainName
  #     ApiId: !Ref ApiGatewayRestApiRasdService
  #     Stage: '*'
  #     ApiMappingKey: !If [ IsDev, 'dev', 'prod' ]

  # ApiGatewayRestApiRasdService:
  #   Type: AWS::ApiGateway::RestApi
  #   Properties:
  #     ApiKeySourceType: HEADER
  #     BinaryMediaTypes:
  #       - "*/*"
  #     DisableExecuteApiEndpoint: false
  #     EndpointConfiguration:
  #       Types:
  #         - EDGE
  #     Name: !Sub ${AWS::StackName}-RestApi
  #     Tags:
  #       - Key: Name
  #         Value: !Ref AWS::StackName

  ApiGatewayCertificateRegional:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${pSubDomain}.${pHostedZone}
      DomainValidationOptions:
        - DomainName: !Sub ${pSubDomain}.${pHostedZone}
          HostedZoneId: !Ref pHostedZoneId
      ValidationMethod: DNS

  DNSBackend:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref pHostedZoneId
      Name: !Sub ${pSubDomain}.${pHostedZone}
      Type: A
      # AliasTarget:
      #   DNSName: !GetAtt ApiGatewayCustomDomainName.RegionalDomainName
      #   HostedZoneId: !
      TTL: '60'

  CognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      # AutoVerifiedAttributes:
      #   - email
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      # EmailVerificationMessage: Please click the link below to verify your email address.
      # EmailVerificationSubject: Your verification link of RASD
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 3
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: organisation_id
        - AttributeDataType: String
          Mutable: true
          Name: family_name
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'
        - AttributeDataType: String
          Mutable: true
          Name: given_name
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'
        - AttributeDataType: String
          Mutable: true
          Name: email
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'

  CognitoGroupAdmin:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Used by the RASD backend to determine user permission level. RASD Admins (inside the app).
      GroupName: Administrators
      Precedence: 1
      UserPoolId: !Ref CognitoPool

  CognitoGroupCustodians:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Used by the RASD backend to determine user permission level. RASD Custodians (inside the app).
      GroupName: DataCustodians
      Precedence: 2
      UserPoolId: !Ref CognitoPool

  CognitoGroupRequestors:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Used by the RASD backend to determine user permission level. RASD Requestors (inside the app).
      GroupName: DataRequestors
      Precedence: 3
      UserPoolId: !Ref CognitoPool

  CognitoAppClientRasdbackend:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoPool
      ClientName: !Sub ${AWS::StackName}-AppClientRasdbackend
      PreventUserExistenceErrors: ENABLED
      GenerateSecret: True
      EnableTokenRevocation: True
      AccessTokenValidity: 180
      IdTokenValidity: 180
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
      ReadAttributes:
        - given_name
        - email_verified
        - custom:organisation_id
        - zoneinfo
        - website
        - preferred_username
        - name
        - locale
        - phone_number
        - family_name
        - birthdate
        - middle_name
        - phone_number_verified
        - profile
        - picture
        - address
        - gender
        - updated_at
        - nickname
        - email
      WriteAttributes:
        - given_name
        - custom:organisation_id
        - zoneinfo
        - website
        - preferred_username
        - name
        - locale
        - phone_number
        - family_name
        - birthdate
        - middle_name
        - profile
        - picture
        - address
        - gender
        - updated_at
        - nickname
        - email

  LambdaBackendService:
    Type: AWS::Lambda::Function
    Properties:
      # Architectures:
      #   - String
      Code: ../../../backend/dist/rasd_fastapi
      # CodeSigningConfigArn: String
      # DeadLetterConfig: DeadLetterConfig
      Description: Rasd Service Lambda Function
      Environment:
        Variables:
          RASD_SECRETS_NAME: !Ref RasdSecrets # !Ref pSecretKeyName
          AWS_COGNITO_CLIENT_ID: !Ref CognitoAppClientRasdbackend
          AWS_COGNITO_POOL_ID: !Ref CognitoPool
          AWS_COGNITO_CLIENT_SECRET_KEY: !GetAtt CognitoAppClientRasdbackend.ClientSecret
          AWS_DYNAMODB_TABLE_ACCESS_REQUESTS: !Sub ${AWS::StackName}-DataAccessRequests
          AWS_DYNAMODB_TABLE_METADATA: !Sub ${AWS::StackName}-Metadata
          AWS_DYNAMODB_TABLE_ORGANISATIONS: !Sub ${AWS::StackName}-Organisations
          AWS_DYNAMODB_TABLE_REGISTRATIONS: !Sub ${AWS::StackName}-Registrations
            # EMAIL_FROM_ADDRESS: ${emailFromAlias}@${ses_MailFrom.mailFromDomain}
            # EMAIL_ADMIN_INBOX: ${varEmailAdminInbox}
      FunctionName: !Sub rasd-${pCleanBranch}-backend-api
      Handler: rasd_fastapi.handler.handler
      MemorySize: 4096
      Role: !GetAtt IAMRoleiamRoleForLambda.Arn
      Runtime: python3.9
      # RuntimeManagementConfig: RuntimeManagementConfig
      # SnapStart: SnapStart
      Timeout: 30
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  SESDomainIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Sub ${pSubDomain}.${pHostedZone}
      MailFromAttributes:
        MailFromDomain: !Sub mail.${pSubDomain}.${pHostedZone}
