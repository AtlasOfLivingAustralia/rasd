AWSTemplateFormatVersion: "2010-09-09"
Description: Code pipeline for RASD service

Parameters:
  pAutoDeploy:
    Type: String
    Description: Sets the pipeline to autodeploy on repo changes
    AllowedValues:
      - true
      - false
  pBootstrapStackName:
    Type: String
    Description: the name of the bootstrap stack
  pBucketsStackName:
    Type: String
    Description: the name of the bucket stack
  pCleanBranch:
    Type: String
    Description: The clean branch, can be used in resource names
  pEnvironment:
    Type: String
    Description: The AWS environment this belongs to
  pGitHubBranch:
    Type: String
    Description: GitHub branch we're deploying from
  pGitHubOwner:
    Type: String
    Description: GitHub owner
  pGitHubRepositoryName:
    Type: String
    Description: GitHub repository name.
  pPipelineFingerprint:
    Type: String
    Description: The MD5 fingerprint of the live pipeline
  pProductComponent:
    Type: String
    Description: The name of the product component
  pProductName:
    Type: String
    Description: The name of the product
  pRestartExecutionOnUpdate:
    Type: String
    Description: Restart that pipeline if it's been updated
    AllowedValues:
      - true
      - false

Conditions:
  IsDev: !Equals
    - !Ref pEnvironment
    - development
  AutoDeploy: !Equals
    - !Ref pAutoDeploy
    - true

Resources:
  ExportConfig:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub
        - "${pProductName}-${pProductComponent}-export-config-${ResourceName}"
        - ResourceName: !If [ IsDev, !Ref pCleanBranch, !Ref pEnvironment ]
      Description: Load the environment and build the CloudFormation template config file
      ServiceRole:
        Fn::ImportValue:
          Fn::Sub: ${pBootstrapStackName}-CodeBuildServiceRoleArn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: ARTIFACTS_BUCKET
            Value:
              Fn::ImportValue:
                Fn::Sub: ${pBucketsStackName}-${AWS::Region}-CodePipelineArtifactBucketName
          - Name: CLEAN_BRANCH
            Value: !Ref pCleanBranch
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub cicd/${pProductComponent}/pipeline/export_config_buildspec.yaml
      TimeoutInMinutes: 5
  EmptyBucket:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub
        - "${pProductName}-${pProductComponent}-empty-bucket-${ResourceName}"
        - ResourceName: !If [ IsDev, !Ref pCleanBranch, !Ref pEnvironment ]
      Description: Empty the source s3 bucket before updating
      ServiceRole:
        Fn::ImportValue:
          Fn::Sub: ${pBootstrapStackName}-CodeBuildServiceRoleArn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub cicd/${pProductComponent}/pipeline/empty_bucket_buildspec.yaml
      TimeoutInMinutes: 5
  DeployNotification:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub
        - ${pProductName}-${pProductComponent}-deploy-notification-${ResourceName}
        - ResourceName: !If [ IsDev, !Ref pCleanBranch, !Ref pEnvironment ]
      Description: Send out the deploy notifications
      ServiceRole:
        Fn::ImportValue:
          Fn::Sub: ${pBootstrapStackName}-CodeBuildServiceRoleArn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: CLEAN_BRANCH
            Value: !Ref pCleanBranch
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub cicd/${pProductComponent}/pipeline/deploy_notification_buildspec.yaml
      TimeoutInMinutes: 5
  LintBuildFrontend:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub
        - "${pProductName}-${pProductComponent}-lint-frontend-${ResourceName}"
        - ResourceName: !If [ IsDev, !Ref pCleanBranch, !Ref pEnvironment ]
      Description: Lint the frontend code
      ServiceRole:
        Fn::ImportValue:
          Fn::Sub: ${pBootstrapStackName}-CodeBuildServiceRoleArn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub cicd/${pProductComponent}/pipeline/lint_build_frontend_buildspec.yaml
      TimeoutInMinutes: 5
  BuildBackend:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub
        - "${pProductName}-${pProductComponent}-build-backend-${ResourceName}"
        - ResourceName: !If [ IsDev, !Ref pCleanBranch, !Ref pEnvironment ]
      Description: Build the backend code
      ServiceRole:
        Fn::ImportValue:
          Fn::Sub: ${pBootstrapStackName}-CodeBuildServiceRoleArn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub cicd/${pProductComponent}/pipeline/build_backend_buildspec.yaml
      TimeoutInMinutes: 5
  ### Pipeline
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub
        - "${pProductName}-${pProductComponent}-pipeline-${ResourceName}"
        - ResourceName: !If [ IsDev, !Ref pCleanBranch, !Ref pEnvironment ]
      PipelineType: V2
      RoleArn:
        Fn::ImportValue:
          Fn::Sub: ${pBootstrapStackName}-CodePipelineServiceRoleArn
      ArtifactStore:
        Type: S3
        Location:
          Fn::ImportValue:
            Fn::Sub: ${pBucketsStackName}-${AWS::Region}-CodePipelineArtifactBucketName
      DisableInboundStageTransitions:
        - Reason: To prevent accidental teardown
          StageName: Teardown
      RestartExecutionOnUpdate: !Ref pRestartExecutionOnUpdate
      Triggers:
        - ProviderType: CodeStarSourceConnection
          GitConfiguration:
            Push:
              - Branches:
                  Includes:
                    - !If [ AutoDeploy, !Ref pGitHubBranch, bogo-branch ]
                FilePaths:
                  Includes:
                    - !Sub cicd/${pProductComponent}/**
            SourceActionName: CheckoutSrc
      Variables:
        - Name: SRC_BRANCH
          DefaultValue: !Ref pGitHubBranch
          Description: The branch this pipeline is deploying from
        - Name: PIPELINE_FINGERPRINT
          DefaultValue: !Ref pPipelineFingerprint
          Description: The fingerprint of the pipeline, used to determine if it's been modified
      Stages:
        - Name: Checkout_Source
          Actions:
            - Name: CheckoutSrc
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn:
                  Fn::ImportValue:
                    Fn::Sub: ${pBootstrapStackName}-CodestarConnectionArn
                FullRepositoryId: !Sub ${pGitHubOwner}/${pGitHubRepositoryName}
                BranchName: !Ref pGitHubBranch
                OutputArtifactFormat: CODEBUILD_CLONE_REF
                DetectChanges: !Ref pAutoDeploy
              Namespace: CheckoutSrcNS
              OutputArtifacts:
                - Name: 'SourceArtifact'

        - Name: Deploy_Infrastructure
          Actions:
            - Name: ExportConfig
              ActionTypeId:
                Owner: AWS
                Category: Build
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ExportConfig
                EnvironmentVariables: !Sub |
                  [
                    { "name":"CLEAN_BRANCH", "value":"${pCleanBranch}" },
                    { "name":"COMMIT_ID", "value":"#{CheckoutSrcNS.CommitId}" },
                    { "name":"ENVIRONMENT", "value":"${pEnvironment}" },
                    { "name":"PIPELINE_FINGERPRINT", "value":"#{variables.PIPELINE_FINGERPRINT}" },
                    { "name":"PRODUCT_COMPONENT", "value":"${pProductComponent}" },
                    { "name":"SRC_BRANCH", "value":"${pGitHubBranch}" }
                  ]
              Namespace: ExportConfigNS
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: ExportConfigArtifact
              RunOrder: 1
            - Name: EmptyBucketPreDeploy
              ActionTypeId:
                Owner: AWS
                Category: Build
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref EmptyBucket
                EnvironmentVariables: !Sub |
                  [
                    { "name":"SOURCE_BUCKET", "value":"${pProductName}-${pProductComponent}-assets" },
                    { "name":"BUCKET_PATH", "value":"${pCleanBranch}-static" }
                  ]
              Namespace: EmptyBucketPreDeployNS
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 2
            - Name: DeployCfStack
              ActionTypeId:
                Owner: AWS
                Category: Deploy
                Version: 1
                Provider: CloudFormation
              Configuration:
                TemplatePath: !Sub 'ExportConfigArtifact::cicd/${pProductComponent}/app/#{ExportConfigNS.APP_STACK_FILE_PFIX}.yaml'
                TemplateConfiguration: !Sub 'ExportConfigArtifact::cicd/${pProductComponent}/app/#{ExportConfigNS.APP_STACK_FILE_PFIX}_template_config.json'
                ActionMode: !If [ IsDev, REPLACE_ON_FAILURE, CREATE_UPDATE ]
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM
                RoleArn:
                  Fn::ImportValue:
                    Fn::Sub: ${pBootstrapStackName}-CloudFormationServiceRoleArn
                StackName: '#{ExportConfigNS.APP_STACK_NAME}'
              InputArtifacts:
                - Name: 'ExportConfigArtifact'
              Namespace: ServiceCloudFormationOutNS
              OutputArtifacts: []
              RunOrder: 3
            - Name: BuildFrontend
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref LintBuildFrontend
                EnvironmentVariables: !Sub |
                  [
                    { "name":"BUCKET_PATH", "value":"${pCleanBranch}-static" },
                    { "name":"BUCKET_NAME", "value":"${pProductName}-${pProductComponent}-assets" },
                    { "name":"NODE_ENV", "value":"${pEnvironment}" },
                    { "name":"ENVIRONMENT", "value":"${pEnvironment}" },
                    { "name":"MODE", "value":"${pEnvironment}" },
                    { "name":"VITE_API_BASE_URL", "value":"https://#{ExportConfigNS.SUB_DOMAIN}.#{ExportConfigNS.HOSTED_ZONE}/api/v1" }
                  ]
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildFrontendArtifact
              RunOrder: 4
        - Name: Deploy
          Actions:
            - Name: DeployNotification
              ActionTypeId:
                Owner: AWS
                Category: Build
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DeployNotification
                EnvironmentVariables: !Sub |
                  [
                    { "name":"AUTHOR", "value":"#{CheckoutSrcNS.AuthorDisplayName}" },
                    { "name":"COMMIT_ID", "value":"#{CheckoutSrcNS.CommitId}" },
                    { "name":"ENVIRONMENT", "value":"${pEnvironment}" },
                    { "name":"PRODUCT_COMPONENT", "value":"#{ExportConfigNS.PRODUCT_COMPONENT}" },
                    { "name":"PRODUCT_NAME", "value":"#{ExportConfigNS.PRODUCT_NAME}" },
                    { "name":"REPO", "value":"#{CheckoutSrcNS.FullRepositoryName}" },
                    { "name":"SLACK_ALERT_CHANNEL", "value":"#{ExportConfigNS.SLACK_ALERT_CHANNEL}" },
                    { "name":"SLACK_DEPLOY_NOTIFICATION", "value":"#{ExportConfigNS.SLACK_DEPLOY_NOTIFICATION}" },
                    { "name":"SUB_DOMAIN", "value":"#{ExportConfigNS.SUB_DOMAIN}" },
                    { "name":"HOSTED_ZONE", "value":"#{ExportConfigNS.HOSTED_ZONE}" },
                    { "name":"HOSTED_ZONE_ID", "value":"#{ExportConfigNS.HOSTED_ZONE_ID}" },
                    { "name":"SRC_BRANCH", "value":"${pGitHubBranch}" }
                  ]
              Namespace: DeployNotificationNS
              InputArtifacts:
                - Name: 'SourceArtifact'
              RunOrder: 1

        - Name: Teardown
          Actions:
            - Name: ApprovalForAppTeardown
              ActionTypeId:
                Owner: AWS
                Category: Approval
                Version: 1
                Provider: Manual
              Configuration:
                CustomData: Approval required to tear down this stack
              RunOrder: 1
            # - Name: EmptyBucketForTeardown
            #   ActionTypeId:
            #     Owner: AWS
            #     Category: Build
            #     Version: 1
            #     Provider: CodeBuild
            #   Configuration:
            #     ProjectName: !Ref EmptyBucket
            #     EnvironmentVariables: |
            #       [
            #         { "name":"SOURCE_BUCKET", "value":"#{ExportConfigNS.SOURCE_BUCKET}" },
            #         { "name":"BUCKET_PATH", "value":"#{ExportConfigNS.BUCKET_PATH}" }
            #       ]
            #   Namespace: EmptyBucketForTeardownNS
            #   InputArtifacts:
            #     - Name: 'SourceArtifact'
            #   RunOrder: 2
            - Name: TeardownAppStack
              ActionTypeId:
                Owner: AWS
                Category: Deploy
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: DELETE_ONLY
                StackName: '#{ExportConfigNS.APP_STACK_NAME}'
                RoleArn:
                  Fn::ImportValue:
                    Fn::Sub: '${pBootstrapStackName}-CloudFormationServiceRoleArn'
              RunOrder: 2
            - Name: ApprovalForPipelineTeardown
              ActionTypeId:
                Owner: AWS
                Category: Approval
                Version: 1
                Provider: Manual
              Configuration:
                CustomData: Approval required to tear down this stack
              RunOrder: 3
            - Name: TeardownCodePipeline
              ActionTypeId:
                Owner: AWS
                Category: Deploy
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: DELETE_ONLY
                StackName: !Ref AWS::StackName
                RoleArn:
                  Fn::ImportValue:
                    Fn::Sub: '${pBootstrapStackName}-CloudFormationServiceRoleArn'
              RunOrder: 4

  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/codebuild/${ExportConfig}
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # BuildCodeLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   DeletionPolicy: Delete
  #   Properties:
  #     LogGroupName: !Sub /aws/codebuild/${BuildCode}
  #     RetentionInDays: 30
  #     Tags:
  #       - Key: Name
  #         Value: !Ref AWS::StackName

  # EmptyBucketLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   DeletionPolicy: Delete
  #   Properties:
  #     LogGroupName: !Sub /aws/codebuild/${EmptyBucket}
  #     RetentionInDays: 30
  #     Tags:
  #       - Key: Name
  #         Value: !Ref AWS::StackName

  DeployNotificationCodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/codebuild/${DeployNotification}
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
